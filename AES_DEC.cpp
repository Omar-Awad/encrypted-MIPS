#include "AES_DEC.h"
#include <iostream>

void AES_DEC::keyExpa() {
	sc_lv<128> keyInSig = keyIn;
	sc_lv<8> key[4][4] ;
	sc_lv<8> temp;

	for(int i=0; i<4;i++)
		for(int j=0;j<4;j++)
			key[j][i] =  keyInSig.range(127-(i*32+j*8), 120-(i*32+j*8));

	for(int i=0; i<4;i++)
		for(int j=0;j<4;j++)
			roundKey[0][i][j] = key[i][j];

	for(int i=1;i<11;i++){ //10 rounds
		//assign last col. in prev. roundKey to 1st col. in curr. roundKey
		for(int j=0;j<4;j++)
			roundKey[i][j][0] = getSBoxValue(static_cast <sc_uint<8>> (roundKey[i-1][j][3]));
		
		//rotWord
		temp = roundKey[i][0][0];
		roundKey[i][0][0] = roundKey[i][1][0];
		roundKey[i][1][0] = roundKey[i][2][0];
		roundKey[i][2][0] = roundKey[i][3][0];
		roundKey[i][3][0] = temp;
		roundKey[i][0][0] = roundKey[i][0][0] ^ getRcon(i-1);

		for(int j=0;j<4;j++)
			roundKey[i][j][0] = roundKey[i][j][0] ^ roundKey[i-1][j][0];

		for(int k=1;k<4;k++)
			for(int j=0;j<4;j++)
				roundKey[i][j][k] = roundKey[i][j][k-1] ^ roundKey[i-1][j][k];
	}	
}

sc_lv<8> AES_DEC::getSBoxValue(sc_uint<8> i){
sc_lv<8> InvSbox[256] = {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
return InvSbox[i];
}

sc_lv<8> AES_DEC::getInvSBoxValue(sc_uint<8> i){
sc_lv<8> InvSbox[256] =  { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
return InvSbox[i];
}




sc_lv<8> AES_DEC::getRcon(int i){
sc_lv<8> Rcon[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
return Rcon[i];
}

void AES_DEC::invSubBytes(){
	for (int i = 0; i<4; i++)
		for (int j = 0; j<4; j++)
			data[i][j] = getInvSBoxValue(data[i][j]);
}

void AES_DEC::invShiftRows(){
sc_lv<8> temp;
	for (int i = 1; i<4; i++)
		for (int j = 0; j<i; j++){
		temp = data[i][3];
		data[i][3] = data[i][2];
		data[i][2] = data[i][1];
		data[i][1] = data[i][0];
		data[i][0] = temp;
	}
}

void AES_DEC::invMixColumns(){
	sc_lv<8> datax4[4][4];
	sc_lv<8> datax5[4][4];
	sc_lv<8> datax6[4][4];
	sc_lv<8> datax7[4][4];
	sc_lv<8> tmp[4][4];
	for(int j=0; j<4;j++){
		for(int i=0;i<4;i++){
				datax4[i][j].range(7,1) = data[i][j].range(6,0);
				datax4[i][j][0]  = SC_LOGIC_0;
				if(data[i][j][7] == SC_LOGIC_1)
					datax4[i][j] = datax4[i][j] ^ "00011011";

			for(int k=0;k<3;k++){
				datax4[i][j].range(7,1) = datax4[i][j].range(6,0);
				datax4[i][j][0]  = SC_LOGIC_0;
				if(datax4[i][j][7] == SC_LOGIC_1)
					datax4[i][j] = datax4[i][j] ^ "00011011";
			}
			datax5[i][j].range(7,1) = datax4[i][j].range(6,0);
			datax5[i][j][0]  = SC_LOGIC_0;
			if(datax4[i][j][7] == SC_LOGIC_1)
				datax5[i][j] = datax5[i][j] ^ "00011011";

			datax6[i][j].range(7,1) = datax5[i][j].range(6,0);
			datax6[i][j][0]  = SC_LOGIC_0;
			if(datax5[i][j][7] == SC_LOGIC_1)
				datax6[i][j] = datax6[i][j] ^ "00011011";

			datax7[i][j].range(7,1) = datax6[i][j].range(6,0);
			datax7[i][j][0]  = SC_LOGIC_0;
			if(datax6[i][j][7] == SC_LOGIC_1)
				datax7[i][j] = datax7[i][j] ^ "00011011";
		}
		tmp[0][j] = datax7[0][j]^datax5[1][j]^data[1][j]^datax6[2][j]^data[2][j]^datax4[3][j]^data[3][j];
		tmp[1][j] = datax4[0][j]^data[0][j]^datax7[1][j]^datax5[2][j]^data[2][j]^datax6[3][j]^data[3][j];
		tmp[2][j] = datax6[0][j]^data[0][j]^datax4[1][j]^data[1][j]^datax7[2][j]^datax5[3][j]^data[3][j];
		tmp[3][j] = datax5[0][j]^data[0][j]^datax6[1][j]^data[1][j]^datax4[2][j]^data[2][j]^datax7[3][j];
		}

		for(int j=0; j<4;j++)
			for(int i=0;i<4;i++)
				data[i][j] = tmp[i][j];
				
				
}

void AES_DEC::invAddRoundKey(int rnd){
	for (int j = 0; j<4; j++)
		for (int i = 0; i<4; i++)
			data[i][j] ^= roundKey[rnd][i][j];
}


void AES_DEC::print(){
	cout << endl;
	for (int j = 0; j<4; j++){
		for (int i = 0; i<4; i++)
			cout << std::hex << data[j][i];
		cout << endl;
		}
}

void AES_DEC::dec(){
	sc_lv<128> cipherSig = cipher;
	sc_lv<128> txtSig;
	keyExpa();

	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			data[j][i] =  cipherSig.range(127-(i*32+j*8), 120-(i*32+j*8));

		invAddRoundKey(10);
		invShiftRows();
		invSubBytes();
		invAddRoundKey(9);
		print();
		invMixColumns();
		print();

	for (int i = 9; i >= 0; i--){
		invShiftRows();
		invSubBytes();
		invAddRoundKey(i);
		invMixColumns();
		}
		invShiftRows();
		invSubBytes();
		invAddRoundKey(0);

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				txtSig.range(127-(i*32+j*8), 120-(i*32+j*8)) = data[j][i];
		text = txtSig;
}

